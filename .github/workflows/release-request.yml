name: Prepare Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - release-test
  pull_request:
    branches:
      - release-test

jobs:
  check-version:
    name: Check Commitizen Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Get current version (without bumping or pushing)
        id: version
        uses: commitizen-tools/commitizen-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          push: false
          dry_run: true
          changelog: false

  prepare-release-pr:
    name: Create Release Branch and PR
    needs: check-version
    if: ${{ needs.check-version.outputs.version != '' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Bump version using Commitizen
        id: cz
        uses: commitizen-tools/commitizen-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_name: ${{ github.actor }}
          git_email: ${{ github.actor }}@users.noreply.github.com }
          push: false
          changelog: true
          dry_run: false

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          title: "Release ${{ steps.cz.outputs.version }}"
          body: "Automated PR for version bump to ${{ steps.cz.outputs.version }}"
          branch: "release-v${{ steps.cz.outputs.version }}"
          delete-branch: true

  check-release:
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Install Commitizen CLI
        run: npm install -g commitizen

      - name: Check if GitHub release already exists
        id: check
        run: |
          VERSION=$(cz version -p)
          echo "Detected version: $VERSION"

          RELEASE_EXISTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION \
            | jq -r '.tag_name // empty')

          if [[ "$RELEASE_EXISTS" == "v$VERSION" ]]; then
            echo "Release v$VERSION already exists."
            echo "release=" >> $GITHUB_OUTPUT
          else
            echo "Release v$VERSION does not exist yet."
            echo "release=$VERSION" >> $GITHUB_OUTPUT
          fi


  finalize-release:
    name: Finalize Release
    needs: check-release
    if: ${{ needs.check-release.outputs.version != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Tag and Push
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a "v${{ needs.check-release.outputs.version }}" -m "Release v${{ needs.check-release.outputs.version }}"
          git push origin "v${{ needs.check-release.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ needs.check-release.outputs.version }}"
          name: "Release v${{ needs.check-release.outputs.version }}"
          body_path: "Changelog.md"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    name: Build and Push Docker
    needs: check-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/herald:v${{ needs.check-release.outputs.version }}
